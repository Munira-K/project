import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.preprocessing import StandardScaler, LabelEncoder
from lightgbm import LGBMClassifier

st.title('üîó–í–∞–∂–Ω–æ—Å—Ç—å :violet-background[–ø—Ä–∏–∑–Ω–∞–∫–æ–≤]')
st.write('–ì—Ä–∞—Ñ–∏–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')

test = pd.read_csv('source/test.csv')
train = pd.read_csv("source/train.csv")
data = pd.concat([test, train])
data = data.sample(129880).reset_index().drop(['index', 'id'], axis=1)
data = data.drop(['Unnamed: 0', 'Arrival Delay in Minutes', 'Departure Delay in Minutes'], axis=1)

le = LabelEncoder()
data['satisfaction'] = le.fit_transform(data['satisfaction'])
data['Class'] = le.fit_transform(data['Class'])
data['Type of Travel'] = le.fit_transform(data['Type of Travel'])
data['Customer Type'] = le.fit_transform(data['Customer Type'])


X = data[[
    'Inflight entertainment',
    'Seat comfort',
    'On-board service',
    'Cleanliness',
    'Leg room service',
    'Inflight wifi service',
    'Baggage handling',
    'Checkin service',
    'Food and drink',
    'Type of Travel']]
y = data['satisfaction']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

logistic = LogisticRegression(max_iter=565)
logistic.fit(X_train, y_train)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)


des_tree = DecisionTreeClassifier(max_depth=5)
des_tree.fit(X_train, y_train)

lgbm_model = LGBMClassifier(verbose=-200)
lgbm_model.fit(X_train, y_train)

feature_names = [
'Inflight entertainment',
'Seat comfort',
'On-board service',
'Cleanliness',
'Leg room service',
'Inflight wifi service',
'Baggage handling',
'Checkin service',
'Food and drink','Ease of Online booking']

st.write('''---
##### üîπ–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏ Logistic Regression''')
coefs = logistic.coef_[0]
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': np.abs(coefs)})
importance_df = importance_df.sort_values(by='Importance', ascending=False)
fig, ax = plt.subplots(figsize=(12, 8))
sns.barplot(
    data=importance_df, 
    x='Importance', 
    y='Feature', 
    palette='PRGn', 
    ax=ax
)
ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
ax.set_ylabel(None)
st.pyplot(fig)


importances_LGBM = lgbm_model.feature_importances_
importances_normalized_LGBM = importances_LGBM / importances_LGBM.sum()
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances_normalized_LGBM})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

st.write('''---
##### üîπ–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏ LGBM''')
fig1, ax = plt.subplots(figsize=(12, 8))
sns.barplot(
    data=importance_df, 
    x='Importance', 
    y='Feature', 
    palette='PRGn', 
    ax=ax
)
ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
ax.set_ylabel(None)
st.pyplot(fig1)


importances = des_tree.feature_importances_
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)
st.write('''---
##### üîπ–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏ Decision Tree''')
fig2, ax = plt.subplots(figsize=(12, 8))
sns.barplot(
    data=importance_df, 
    x='Importance', 
    y='Feature', 
    palette='PRGn', 
    ax=ax
)
ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
ax.set_ylabel(None)
st.pyplot(fig2)

st.write('''
- Wi-Fi –Ω–∞ –±–æ—Ä—Ç—É –∏ —É–¥–æ–±—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –≤–ª–∏—è—é—â–∏–º–∏ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –≠—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —É–¥–æ–±—Å—Ç–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥.
- –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –±–æ—Ä—Ç—É –∏ –∫–æ–º—Ñ–æ—Ä—Ç —Å–∏–¥–µ–Ω–∏–π —Ç–∞–∫–∂–µ –∏–≥—Ä–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Ä–æ–ª—å, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–∞–∂–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –±–æ—Ä—Ç—É —Ç–∞–∫–∂–µ –≤–∞–∂–Ω—ã, –Ω–æ –≤ –º–µ–Ω—å—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏, —á–µ–º Wi-Fi –∏ —É–¥–æ–±—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
''')
